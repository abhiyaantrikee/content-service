{
  "swagger": "2.0",
  "info": {
    "title": "Content Model Specification",
    "description": "```\n  Current Status : 'Initial Draft'\n```\nModel Specification for Content and its operations:\n  - Content Management API (Admin)\n    - GET\n      - Retrieve All Content [filters-Optional parameter based on this content will be fetched]\n    - POST\n      - Create Content\n    - PATCH\n      - Partially Update a Content (Workflow update)\n    - PUT\n      - Update a Content\n  - Content Data API (Users)\n    - GET\n      - Retrieve Content ( using Filters and status=PUBLISHED and endDate > Current Date)\n\n** Revision History **\n* 0.0.1, Initial Draft\n",
    "version": "0.0.1"
  },
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "definitions": {
    "Content": {
      "description": "Content Entity for creating content of type Image, PDF, text, Video\n",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique Id of the Content (equivalent to PRIMARY KEY)\n",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "description": "Title of the Content shown on the UI\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the Content to identify the Content\n"
        },
        "startDate": {
          "type": "string",
          "description": "Start date of content validity\n",
          "format": "date-time",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "endDate": {
          "type": "string",
          "description": "End date of content validity\n",
          "format": "date-time",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "feature": {
          "type": "string",
          "description": "Feature to which the content belongs to\n"
        },
        "format": {
          "type": "string",
          "description": "Format of the Content [IMAGE, VIDEO, TEXT,PDF]\n",
          "enum": [
            "IMAGE",
            "VIDEO",
            "TEXT",
            "PDF"
          ]
        },
        "version": {
          "type": "string",
          "description": "Version of the Content\n"
        },
        "majorVersionFlag": {
          "type": "boolean",
          "description": "Specifies if the version being created is a major version\n"
        },
        "assetUrl": {
          "type": "string",
          "description": "URL of Content. For Image/PDF it could be File system path, For Video\nit could be File Path or WWW URL\n"
        },
        "text": {
          "type": "string",
          "description": "Text of the Content\n"
        },
        "status": {
          "type": "string",
          "description": "Specifies the approval status of the content\n",
          "enum": [
            "CREATED",
            "SENTFORREVIEW",
            "INREVIEW",
            "APPROVED",
            "REJECTED",
            "PUBLISHED"
          ]
        },
        "createdBy": {
          "type": "string",
          "description": "User who created the Content\n"
        },
        "createdDate": {
          "type": "string",
          "description": "Created date of the Content\n",
          "format": "date-time",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "updatedDate": {
          "type": "string",
          "description": "Updated date/published date of the Content\n",
          "format": "date-time",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}"
        },
        "updatedBy": {
          "type": "string",
          "description": "User who updated the Content\n"
        },
        "locale": {
          "type": "string",
          "description": "locale of the Content\n"
        },
        "extendedData": {
          "type": "object",
          "description": "Extended Data to hold any format data associated to the Content\n"
        },
        "workflowList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkFlow"
          },
          "description": "List containing information about diffrent workflow states content was passed through\n"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This error model inherits loopback default error object\n",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "Error Code (Business)\n"
        },
        "message": {
          "type": "string",
          "description": "Default loopback error object attribute\n"
        },
        "statusCode": {
          "type": "integer",
          "description": "Default loopback error object attribute\n",
          "format": "int32"
        },
        "additionalProperties": {
          "type": "object",
          "description": "Additional Properties related to an error, which would not be\navailable in response to Client. This is only for dev and logging\n",
          "properties": {
            "statusCode": {
              "type": "integer",
              "description": "Status Code of the Error specific to Application\n",
              "format": "int32"
            },
            "statusDescription": {
              "type": "string",
              "description": "Status Description of the Error specific to Application\n"
            },
            "severity": {
              "type": "string",
              "description": "Severity of an error\n"
            },
            "stackTrace": {
              "type": "string",
              "description": "Detail Error Message, this would not be available in Response to\nClient\n"
            }
          }
        }
      }
    },
    "WorkFlow": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "description": "Reviewer who initiated workflow transition\n"
        },
        "role": {
          "type": "string",
          "description": "Role of the reviewer who initiated workflow transiton\n"
        },
        "comment": {
          "type": "string",
          "description": "Comments by reviewer\n"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "pattern": "\\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}",
          "description": "Time when the state transition happened\n"
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Content"
        ],
        "operationId": "findAllContent",
        "description": "Fetch all the Content\n",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter expression provided by calling application",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Content"
        ],
        "description": "Creates the Content.\n",
        "operationId": "createContent",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "description": "the Content to be created.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Content"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response\n",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Content"
              }
            }
          },
          "400": {
            "description": "Validation Error\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error Response\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Content"
        ],
        "operationId": "updateContet",
        "description": "Update the Content.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Content"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Content"
        ],
        "operationId": "updateWorkflow",
        "description": "Updates WorkFlow of the content.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Content"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Validation Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Error Response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  }
}